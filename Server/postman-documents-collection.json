{
	"info": {
		"_postman_id": "document-api-collection",
		"name": "Legal Aid - Document API (AI Explanation)",
		"description": "Complete API collection for testing document upload, AI explanation (Gemini), and management endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "document_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": ["{{base_url}}"],
					"path": ["health"]
				},
				"description": "Check if the server is running and healthy"
			},
			"response": []
		},
		{
			"name": "Get Supported Languages",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/documents/languages",
					"host": ["{{base_url}}"],
					"path": ["api", "documents", "languages"]
				},
				"description": "Get list of supported languages for AI explanation (English, Sinhala, Tamil)"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has languages array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.data.languages).to.be.an('array');",
							"    pm.expect(jsonData.data.languages.length).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Upload Document (Simple)",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "document",
							"type": "file",
							"src": [],
							"description": "Select a PDF, image, or document file"
						},
						{
							"key": "category",
							"value": "Legal",
							"type": "text",
							"description": "Category: Legal, Contract, Certificate, ID, Personal, Business, Medical, Education, General"
						},
						{
							"key": "language",
							"value": "english",
							"type": "text",
							"description": "Language: english, sinhala, tamil"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/documents/upload",
					"host": ["{{base_url}}"],
					"path": ["api", "documents", "upload"]
				},
				"description": "Upload a document without AI explanation. Accepts PDF, images (JPG, PNG, TIFF, BMP)."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Document uploaded successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.data.documentId).to.exist;",
							"    ",
							"    // Save document ID for later use",
							"    pm.collectionVariables.set(\"document_id\", jsonData.data.documentId);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Explain Document - English",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "document",
							"type": "file",
							"src": [],
							"description": "Select a PDF file (REQUIRED - PDF only)"
						},
						{
							"key": "language",
							"value": "english",
							"type": "text",
							"description": "Language for explanation (english, sinhala, tamil)"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/documents/explain",
					"host": ["{{base_url}}"],
					"path": ["api", "documents", "explain"]
				},
				"description": "Upload a PDF and get AI-powered explanation in English. The AI will analyze the legal document and provide comprehensive explanation including document type, key points, parties involved, obligations, dates, legal implications, and summary."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"AI explanation successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.data.explanation).to.exist;",
							"    pm.expect(jsonData.data.explanation.length).to.be.above(100);",
							"    pm.expect(jsonData.data.language).to.eql('english');",
							"    pm.expect(jsonData.data.confidence).to.be.above(0);",
							"    ",
							"    // Save document ID",
							"    pm.collectionVariables.set(\"document_id\", jsonData.data.document.id);",
							"    ",
							"    console.log(\"Explanation length:\", jsonData.data.explanation.length);",
							"    console.log(\"Confidence:\", jsonData.data.confidence);",
							"    console.log(\"Word count:\", jsonData.data.wordCount);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Explain Document - Sinhala",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "document",
							"type": "file",
							"src": [],
							"description": "Select a PDF file (REQUIRED - PDF only)"
						},
						{
							"key": "language",
							"value": "sinhala",
							"type": "text",
							"description": "සිංහල භාෂාවෙන් පැහැදිලි කිරීම"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/documents/explain",
					"host": ["{{base_url}}"],
					"path": ["api", "documents", "explain"]
				},
				"description": "Upload a PDF and get AI-powered explanation in Sinhala (සිංහල). The AI will provide a comprehensive legal document explanation in Sinhala language."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Sinhala explanation successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.data.language).to.eql('sinhala');",
							"    pm.expect(jsonData.data.explanation).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Explain Document - Tamil",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "document",
							"type": "file",
							"src": [],
							"description": "Select a PDF file (REQUIRED - PDF only)"
						},
						{
							"key": "language",
							"value": "tamil",
							"type": "text",
							"description": "தமிழில் விளக்கம்"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/documents/explain",
					"host": ["{{base_url}}"],
					"path": ["api", "documents", "explain"]
				},
				"description": "Upload a PDF and get AI-powered explanation in Tamil (தமிழ்). The AI will provide a comprehensive legal document explanation in Tamil language."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Tamil explanation successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.data.language).to.eql('tamil');",
							"    pm.expect(jsonData.data.explanation).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Get All Documents",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/documents?page=1&limit=10",
					"host": ["{{base_url}}"],
					"path": ["api", "documents"],
					"query": [
						{
							"key": "page",
							"value": "1",
							"description": "Page number (default: 1)"
						},
						{
							"key": "limit",
							"value": "10",
							"description": "Items per page (default: 10)"
						},
						{
							"key": "category",
							"value": "Legal",
							"description": "Filter by category",
							"disabled": true
						}
					]
				},
				"description": "Get paginated list of all documents with optional category filter"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has documents array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.data.documents).to.be.an('array');",
							"    pm.expect(jsonData.data.pagination).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Get Document By ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/documents/{{document_id}}",
					"host": ["{{base_url}}"],
					"path": ["api", "documents", "{{document_id}}"]
				},
				"description": "Get detailed information about a specific document by its ID. Include AI explanation if available."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Document details retrieved\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.data._id).to.exist;",
							"    pm.expect(jsonData.data.filename).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Delete Document",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/documents/{{document_id}}",
					"host": ["{{base_url}}"],
					"path": ["api", "documents", "{{document_id}}"]
				},
				"description": "Delete a document and its associated files by ID"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Document deleted successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    pm.expect(jsonData.message).to.include('deleted');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Test - Invalid File Type (Non-PDF for Explain)",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "document",
							"type": "file",
							"src": [],
							"description": "Try uploading a non-PDF file (should fail)"
						},
						{
							"key": "language",
							"value": "english",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/documents/explain",
					"host": ["{{base_url}}"],
					"path": ["api", "documents", "explain"]
				},
				"description": "Test error handling - trying to explain a non-PDF file should return 400 error"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message for invalid file type\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"    pm.expect(jsonData.message).to.include('PDF');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Test - Missing File",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "language",
							"value": "english",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/documents/explain",
					"host": ["{{base_url}}"],
					"path": ["api", "documents", "explain"]
				},
				"description": "Test error handling - no file uploaded should return 400 error"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message for missing file\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"    pm.expect(jsonData.message).to.include('required');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Test - Invalid Language",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "document",
							"type": "file",
							"src": [],
							"description": "Select a PDF file"
						},
						{
							"key": "language",
							"value": "french",
							"type": "text",
							"description": "Invalid language (should fail)"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/documents/explain",
					"host": ["{{base_url}}"],
					"path": ["api", "documents", "explain"]
				},
				"description": "Test error handling - unsupported language should return 400 error"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message for unsupported language\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"    pm.expect(jsonData.message).to.include('language');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Test - Invalid Document ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/documents/invalid_id_123",
					"host": ["{{base_url}}"],
					"path": ["api", "documents", "invalid_id_123"]
				},
				"description": "Test error handling - invalid document ID format should return 400 error"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message for invalid ID format\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"    pm.expect(jsonData.message).to.include('Invalid');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Testing Document API with AI Explanation (Gemini)');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test(\"Response time is less than 30 seconds\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(30000);",
					"});",
					"",
					"pm.test(\"Response has correct content-type\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	]
}
